Copyright 2007 TeX Users Group.
You may freely use, modify and/or distribute this file.

=========================================================================
  Using verbatim PostScript in DVI files produced by TeX (verbatim.txt)
=========================================================================

			Don't!		(;=)

Seriously, if an effect *can* be achieved 

	(i) directly in TeX (using rules, or the LaTeX line & circle fonts);

	(ii) by insertion of an EPS figure;

	(iii) by inserting of a TIFF image;

	(iv) by use of `emlines' \specials; or

	(v) by use of device independent TPIC \specials;

then it is better *not* to use verbatim PostScript.  For one thing, a
solution using TeX alone is more portable.  For another, you cannot easily
preview a file using inserted verbatim PostScript on a platform that does not
support Display PostScript --- and you cannot easily print such as file on a
non-PostScript printer.  Furthermore, debugging inserted verbatim PostScript
can be very difficult.  Finally, raw PostScript is totally dependent on the
environment used by a particular DVI-to-PS driver.

FIGURE INSERTION:
=================

For EPS figure insertion --- in plain TEX or LaTeX 2.09 --- use Tom Rokicki's
EPSF.TEX (see `epsfsafe.tex' for a version that can handle EPSF files with
TIFF preview) or Trevor Darrell's PSFIG.TEX (see `psfigfix.txt' for
information on how to handle EPS files with TIFF preview).  The latest
version of PSFIG is available by anonymous FTP from
`whitechapel.media.mit.edu'.  

LaTeX2e also has a very powerful graphics package --- which can be customized
for various `drivers' including DVIPSONE (see below).  This can be used for
EPS figure insertion as well as for PostScript `tricks,' like text rotation.
Please refer to the file `grfguide.tex' in the `graphics' package.

The low level interface for EPS file inclusion in the Y&Y TeX System using
\specials is described in the Y&Y TeX System Technical Addendum.  

For the low level details of TPIC specials, please refer to `tpicspec.txt'
and `tpictest.tex'. Higher level interfaces include EEPIC and TeXCAD.

GENERAL NOTES:
==============

Some interesting effects, such as rotated text, can be achieved using
verbatim PostScript in \specials in DVISPONE.  Some experimentation may be
required to achieve exactly the effect you desire without disturbing TeX's
positioning of text on the page, or the current font selection.  These notes
should help in this regard.

There are several ways of including verbatim PostScript in DVIPSONE,
but all have the potential of corrupting the PostScript file produced.
As a reminder, the least protected methods for including verbatim 
PostScript are enabled only if you use the `-j' command line flag.

Download `ehandler.ps' to the printer ahead of time to obtain 
potentially useful debugging information if nothing comes out.  

Lack of standardization:
------------------------

There is no standardization of use of \special for verbatim PostScript
(actually, for *any* use of \special!).  Generally, verbatim PostScript code
that works with one DVI-to-PS converter will *not* work with another
DVI-to-PS converter.  The reason is that the code operates in very different
PostScript environments, and is not an indictment of *either* DVI processor.

In DVIPSONE, the least protected schemes for including verbatim PostScript
require use of the `j' command line flag (which also causes DVIPSONE to
treat certain unrecognized specials as verbatim PS).  This is not to say, 
of course, that safe working code is guaranteed when using one of the 
schemes that does not require the `j' flag!

Since verbatim PostScript depends on the PostScript environment generated
by DVIPSONE, it can be version dependent.  While no major changes are
planned, continued operation of code that depends on undocumented features
of DVIPSONE --- or the DVIPSONE preamble --- cannot be guaranteed.

PostScript environment:
-----------------------

In some of the schemes for including verbatim PostScript, the coordinate
system is the default PostScript coordinate system.  In this standard
coordinate system, the origin is at the lower left corner, with x increasing
to the right, y increasing upward, at 72 units per inch.  In some cases 
the inserted code is bracketed by save/restore or gsave/grestore pairs.  
See detailed comparison at end.

`PageHeight' and `PageWidth' are defined in PostScript points (72 per inch).
These quantities are accessible to verbatim PostScript and are handy when
one wants to flip the page horizontally or vertically, or to rotate it.

The dictionary called `dvidict' --- which is used by code in the preamble 
and by code generated by DVIPSONE --- is on top of the dictionary stack.

Beginning and End Page Hooks:
-----------------------------

You can define PostScript procedures that are called at the top of the page
(bphook) and at the bottom of the page (ephook).  The default `bphook'
and `ephook' procedures do nothing.  Both operate in the standard PostScript
coordinate system, and are inside the save/restore pair for the page. You
can set up bphook and ephook procedures using a PostScript header/prolog file:

	\special{header=<user-prolog-file>}

(or use -w=<user-prolog-file> on the command line).  Alternatively use

	\special{headertext=<verbatim-user-supplied-prolog>}

Beginning-of-page hooks can be useful for inserting backgrounds, crop marks,
and borders, or for changing the coordinate system.  An example use of a
header file to set the `begin-page-hook' is given below.

Note that with DVIPS, the equivalent of `bphook' is called `bop-hook' while
the equivalent of `ephook' is called `eop-hook'.

Here are some useful tidbits of information:
--------------------------------------------

* Do *not* leave anything on the stack (and do not remove any items you did
  not place there either).  DVIPSONE produces PostScript code that relies on
  the stack, and that code will get confused if any additional items are
  found on the stack after a \special.

* If you need to preserve some information (CTM, the current point or gray
  level say) then use variables to hold the values (rather than leaving
  things on the stack --- see above).  Avoid short names that might conflict
  with names used by the DVIPSONE preamble.

* Use save/restore or gsave/grestore -- *within* a particular \special -- 
  if needed to preserve the state and to restore it after inserted PS code.

* Avoid matching use of `save' or `gsave' in one \special with `restore'
  or `grestore' in *another* \special.  In most cases you will be
  preserving more of the state than you want *and* undoing desired changes in
  state.  Save and restore *only* the specific state variables that actually
  need to be restored (often just the current point).  Alternatively, when
  restoring state omit components that should not be restored.  Consider
  the following examples:

* If you need to save the current point in one special, use PS code like:

	currentpoint /savedy exch def /savedx exch def

  You can later restore the current point (to get back to the same place on
  the page) using:

	savedx savedy moveto

* If you need to save the current transformation matrix (CTM) use PS code like:

	/savedCTM matrix currentmatrix def

  You can restore it later (to get back the same coordinate transformation):

	savedCTM setmatrix

* If you need to save the current gray level in one special use PS code like:

	/savedgray currentgray def

  You can restore it later in another special (perhaps because you changed
  the gray level while painting something directly in PostScript):

	savedgray setgray

*  If you need to preserve the current font in one special use PS code like:

	/savedfont currentfont def

   You can restore it later in another special (perhaps because you 
   inserted something using a different font):

	savedfont setfont

*  NOTE: to preserve and restore state *within a single* \special,
   just use save/restore or gsave/grestore, as appropriate.

*  Do not confuse TeX's current point with the current point in PostScript.
   In particular, by moving around the current point on the page using
   verbatim PostScript you may get bizarre placement of text on the page
   (which may be what you are after, and then again it may not :-).
   Obviously TeX knows nothing of the changes you have made --- TeX
   assumes the current point is the *same* after a \special as it was before.
   Consequently, in many cases one wants to be back to the same point
   in PostScript, with the same CTM in force at the end of a \special
   as at the beginning.  Sometimes gsave/grestore pairs may be appropriate.

*  Always follow \specials with either additional TeX control sequences or %.
   Otherwise TeX will insert horizontal space where you did not expect it.

EXAMPLES:
=========

Example 1a (rotated text block):
--------------------------------

A text block is to appear in the left margin rotated 90 degrees
(so lines run down the page).  Normal text is to resume below that:

	% The following is normal text before the rotated part:

	\noindent The graphs of $f$ and $f{-1}$ are so closely related that
	it is possible to use the graph of $f$ to visualize the graph of
	$f^{-1}$. If $f$ has the graph shown in {\bf Figure 2(a)}.

	% The following sets up the rotated text (with narrower margins):

	\setbox0\vbox{\hsize=13pc \raggedright \noindent
	and you rotate this page counter clockwise through a right angle,
	then the graph of $f^{-1}$ appears on your left (Figure 2(b)).
	The only trouble is that the numbering on the horizontal axis goes
	in the wrong direction, so you must flip this picture over to get the
	usual picture of $f^{-1}$, which appears on your right (Figure 3).
	your right (Figure 3).}

	% The first \special preserves the current point and the current CTM;
	% it then rotates the coordinate system by 90 degrees;
	% the rotated text is then typeset;
	% the second \special restores the CTM and the current point.

	\special{ps:: currentpoint /savedy exch def /savedx exch def
	/savedmatrix matrix currentmatrix def 90 rotate}%
	\box0
	\special{ps:: savedmatrix setmatrix savedx savedy moveto}%

	% We are now back where we were before the rotated text was inserted
	% Move *down* page by amount equal to the *width* of the rotated text
	% (Otherwise the following text will appear *next* to the rotated part)

	\vskip13pc

	% Now back to more text in normal orientation:

	\noindent This procedure is awkard with books and impossible with
	blackboards, so it is fortunate that there is another way of
	constructing the graph of $f^{-1}$.

Note how the \specials *only* preserved the CTM and the current point.
gsave\grestore instead preserve the full graphical state, including the
current font, which can have undesirable results if there are font switches.

Example 1b (rotated text block):
--------------------------------

The same rotated text block can be achieved using instead:

	\special{ps:: gsave 90 rotate}%
	\box0
	\special{ps:: currentfont grestore setfont}%

In this case, rather than explicitly saving *only* what needs to be saved
(CTM and currentpoint), we save the full graphical state (using gsave), but
then selectively avoid restoring those parts of the state that should stay
the same (namely the current font).

The reason one shouldn't restore the font, is that TeX is assuming that the
font after the second \special is exactly what it was before the second
\special, namely the font last used in the rotated text, rather than the font
that was selected just before the first \special (which is what `grestore'
would restore).

NOTE: Using `rotate.sty':
------------------------

      In plain TeX and LaTeX 2.09 you can use `rotate.tex' or `rotate.sty'.
      This style file was designed for use with DVIPS, which uses a
      left-handed coordinate system.  You can use `rotate.sty' with 
      DVIPSONE, after making some small changes: 

      For DVIPSONE, either (i) use ps:: instead of ps: in \@vspec
      or (ii) change the 90 to 270, and conversely change the 270 to 90.
      Also: remember to use the -j command line flag to enable raw PS.

      In LaTeX 2e use `epsfig.sty' from the graphics package and specify the
      appropriate driver option.

Example 2a (gray rules):
------------------------

A gray rule is to appear in some text:

	\noindent This (black) text is followed by a gray rule%
	\special{ps:: /savedgray currentgray def .75 setgray}%
	\hbox{\vrule height1pc depth0pt width 50pt}%
	\special{ps:: savedgray setgray}%
	This text is preceded by a gray rule (and is black again).

Note how the \specials only preserve and restore the gray value.
gsave/grestore instead restores the full graphical statem, including the
current point, and so the text following would have been placed on top of
the rule rather than to its right where it belongs.

Example 2b (gray rules):
------------------------

We can achieve the same gray rule between two pieces of text using:

	\noindent This (black) text is followed by a gray rule%
	\special{ps:: gsave .75 setgray}%
	\hbox{\vrule height1pc depth0pt width 50pt}%
	\special{ps:: currentpoint grestore moveto}%
	This text is preceded by a gray rule (and is black again).

As in example (1b), we use `gsave' to save the full graphical state, but
then selectively do not restore the part we don't want restored, in this
case the current point.  The reason we do not want to retore the current
point is that after typesetting the rule, TeX's current point is at the 
right end of the rule, not at the left, which is what grestore would 
restore (and so the following text would overprint the gray rule).

NOTE:	It is best to use \special{color rgb <r> <g> <b>} instead.  
	This is supported by both DVIPSONE and DVIWindo.

Example 3 (two color work):
---------------------------

Here is one way to do simple two color work in DVIPSONE, using just PS
level I printers/image setters.

Make everything that is to appear using the spot color be some special
distinguishable gray level - lets say 0.5 (if we can assume that everything
else is either 0 (black) or 1 (white)).

It is probably best to define some macro for this because it is quite
possible you'll want to change this later on.  Here is a simple example:

	\def\blue#1{%
	\special{ps:: /oldgray currentgray def 0.5 setgray}%
	#1\special{ps:: oldgray setgray}%
	}

	This text is in black.
	\blue{This text appears in blue.}
	This text is in black.

Run this through TeX.  Make up one PS file (called black.ps say):

	{dup 0.4 gt 1 index 0.6 lt and {pop 1} {pop 0} ifelse} settransfer

This maps 0.5 gray to 1 (white) and 0 and 1 to 0 (black).  Make up another PS
file (called blue.ps say): 

	{dup 0.4 gt 1 index 0.6 lt and {pop 0} {pop 1} ifelse} settransfer

This maps 0.5 to 0 (black) and 0 and 1 to 1 (white).
The first PS file will be used for black, and the second for blue.

Now run the DVI file through DVIPSONE twice (use the -j command line flag 
so it won't complain about the verbatim PostScript code).  The first time
use -w=black on the command line, the second time use -w=blue.  This will
pull in the above PostScript files as prolog files.  You will get two
PS files, one for the black plate and one for the blue (you'll have to 
rename or move the first file to avoid overwriting it the second time you
call DVIPSONE, of course).

The above method does not take into account the current transfer
function, which is OK in most cases.  For the politically correct
way of doing something more elaborate see page 743 of the second
edition of the PostScript Reference Manual.

The same idea can be extended to more than two colors, you just need
to pick a set of distinguishable gray levels to label them.

Note that you can't rely on an *equality* test in the PostScript code
because of rounding problems and the discrete set of values in the
lookup table (usually 256) used by the PS interpreter.

Also, *everything* will be effected by this transfer function modification.
So this won't work nicely if you have inserted TIFF images with continuous
range of gray levels.

This can be made to work with inserted figures in EPS form as well,
if the figure is made using the same conventions: 0.5 gray for blue,
and 0 gray for black.

This may appear a little confusing at first, because instead of using
colors directly, one uses one PostScript file per color - and in each
of these PS files the corresponding color is painted *black*

Unfortunately, there isn't something analogous to settransfer (which works
with setgray and currentgray) to work with setrgbcolor and currentrgbcolor
(because it would need much too large a lookup table).

NOTE:	It is best to use \special{color rgb <r> <g> <b>} instead.  
	This is supported by both DVIPSONE and DVIWindo.

This is an example where use of predefined \specials may be better than
raw PostScript.  Use

	\def\blue#1{%
	\special{color push}
	\special{color rgb 128 128 128}%
	#1\special{color pop}}

instead and you get support by both DVIPSONE *and* DVIWindo.

Example 4: changing scale and position:
---------------------------------------

One can change the scale and position on the page of output from DVIPSONE
using command line arguments `-m=...', `-x=...' and `-y=...".
The same effects can be achieved by editing the PostScript file without
the need for rerunning DVIPSONE, just by changing the values of
/mag, /xoffset, and /yoffset.

Just to illustrate yet another way of using verbatim PostScript, lets see how
this can be done using a PS header file.  Suppose the file we will construct
will be called `control.ps'.  Then *anywhere* in the TeX source say: 

	\special{header=control}

This will insert the PS text from `control.ps' ahead of any output from TeX
(and inside `dvidict begin ... end').

Now create the header file with something like the following in it:

/bphook{
	/mag 1200 def
	/xoffset 72 def
	/yoffset 72 def
}def

This tells DVIPSONE to start each page by redefining magnification to
be 1200 (instead of the default 1000), xoffset to be 72 pt (instead of 0),
and yoffset to be 72 pt (instead of 0) etc. 

Example 4:  suppressing \specials targeted for other DVI processors:
--------------------------------------------------------------------

Each DVI processor supports its own set of \specials.  Some of these
are verbatim PostScript, and as such are passed through by DVIPSONE
(since it has no way to distinguish `intensional' use of verbatim PS
and `bad' \specials intended for a different driver).  It is always 
best to edit the TeX source to get rid of these \specials.  But
sometimes this may not be possible.

One way of dealing with this is to define dummy PostScript procedures.  
For example, if your driver uses `m1200' to change the magnification ,
and `cop3' to change the number of copies, you may wish to define: 

	/m1200{}def
	/cop3{}def

This code can now either be placed in a PS header file, read in 
using \special{header=...}, inserted using \special{headertext=...},
or appended to the DVIPREAMB file itself.

If your `dvipreamb.enc' file is in binary form, then first pass it 
through PFBtoPFA to convert it to hexadecimal.  Then rename the output
file (called `dvipreamb.pfa') back to `dvipreamb.enc'.  Finally, append
your PostScript definitions, but bracket them in `dvidict begin'
and `end', as follows:

dvidict begin
	/m1200{}def
	/cop3{}def
end

What about calls that take arguments?  Suppose your non-standard
\special is of the form \special{234 435 foo}.  Then simply pop the
arguments off the stack in the dummy procedure called `foo':

	/foo{pop pop}def

Life is harder if the arguments *follow* the command, as in
\special{xy 234 435}.  You may be able to use `readline' to read
and discard the rest of the line:

	/xy{currentfile 256 string readline pop pop}def


Example 5:  Adding a background `water mark' to each page:
----------------------------------------------------------

%!PS-Adobe-2.0

% This is the file draft.ps used for adding a `water mark' DRAFT behind 
% every page.  One way to use it is to simply add the following line
%	\special{header=draft.ps}
% anywhere in your (La-)TeX source file.

/bphook{
	gsave 
	0.9 setgray
	/Helvetica findfont 200 scalefont setfont
	225 75 moveto 60 rotate
	(DRAFT) show 
	grestore
}def
%%EOF

Example 6:  mirror imaging and inverting black and white
-------------------------------------------------------

%!PS-Adobe-2.0

% This is the file invert.ps
% used for printing negative, inverted image
% One way to use it is to simply add the following line
%	\special{header=invert.ps}
% anywhere in your (La-)TeX source file.

/bphook{
	gsave 0 setgray
	0 0 moveto 612 0 lineto 612 792 lineto 0 792 lineto closepath 
	fill grestore			% paint background black
	{1 exch sub}settransfer		% white on black
	612 0 translate -1 1 scale	% flip horizontally
%	0 792 translate 1 -1 scale	% flip vertically
}def
%%EOF

DEALING WITH EXISTING TEX MACRO PACKAGES:
==========================================

Modifications of \specials meant for other drivers:
---------------------------------------------------

Sometimes verbatim PostScript intended for other DVI drivers
miraculously works in DVIPSONE.  Sometimes it almost works.
One example is used of the following pair of \specials for
rotating a text block:

ps:gsave currentpoint currentpoint translate 270 rotate 
	neg exch neg exch translate

ps:currentpoint grestore moveto

While this violates the rules listed above, it almost works.  The problem is
that it is designed for a driver that uses a *left-handed* coordinate system.
To make it work with DVIPSONE, change the 270 to 90.  Another way to
make it work is to change the ps: to ps:: (and use the -j command line flag).


TeX Drawing packages (e.g. kuvio.tex, texdraw.tex):
---------------------------------------------------

Several of these emit code that is intended for DVIPS.  DVIPSONE recognizes
these, but uses a right-hand coordinate system where positive rotations are
ANTI-CLOCKWISE (as in the default PostScript coordinate system), while DVIPS
uses a left-hand coordinate system where positive rotations are CLOCKWISE.

To modify, for example, Anders G. S.  Svensson's `kuvio.tex' find the text:

	...translate #1 neg #2 atan rotate ...

and remove the `neg' between the #1 and #2.  A few lines below find the line:

	~translate #1 neg rotate ...

and remove the `neg' after the #1.

Similary, if you have problems with rotation using Peter Kabal's
`texdraw.tex,' then look for the macro \def\rottxt, and add `neg' before 
the `rotate' in the PostScript code emitted in a \special.

Timothy Van Zandt's PsTricks:
-----------------------------

The powerful PsTricks package depends on three files that need to
be customized for particular DVI-to-PS drivers.  Make sure to get
the appropriate (for DVIPSONE instead of DVIPS) versions of 

	pstricks.pro, pst-show.pro and pstricks.con

The first two of the abvoe are PostScript `prolog' files, while the
last is a `configuration' TeX macro file.


LaTeX 2e graphics package
--------------------------

The LaTeX 2e graphics package by David Carlisle has been set up to
allow customization for various `drivers'.  Make sure to specify
[dvipsone] as an option with the graphics packages (which refers to 
the file `dvipsone.def' created by running TeX on `drivers.dtx').

The best way to set things up is to create files called 
`graphics.cfg' and `color.cfg' that each containsjust the line:

	\ExecuteOptions{dvipsone}

Please refer to `grfguide.tex' for additional details.


LIST OF \SPECIALS FOR INSERTING VERBATIM POSTSCRIPT:
====================================================

DVIPSONE provides a large number of schemes for including verbatim PostScript,
in order to provide partial support for methods used by other DVI processors.
We wish there was *some* standardization!  Here is the complete list:

\special{verbatim="<PS code>"}

	Standard PS coordinate system - no gsave/grestore

\special{ps: <PS code>}				% naked PS style

	Standard PS coordinate system - no gsave/grestore

\special{postscript <PS code>}			% Textures style

	PS coords, but origin at current point - does gsave/grestore

\special{language "PS", literal "<PS code>"}	% DVIALW style

	Standard PS coords - full save/restore - treated like inserted figure

\special{"<PS code>}				% DVIPS `literal graphics'

	PS coords, but origin at current point - full save/restore

\special{dvitops: inline <PS code>}		% DVITOPS style	  (use `j')

	No protection (except restores font)

\special{ps:: <PS code>}			% DVIPS style	   (use `j')

	No protection

\special{pstext=<PS code>}			% DVI2PS-Li style  (use `j')

	No protection

\special{ps: literal <PS code>}			% DVI2PS-SvB style (use `j')

	No protection

\special{header=<PS file>}			% user supplied header file

	Contributed to user supplied prolog (in dvidict)

\special{headertext=<PS code>}			% user supplied verbatim header

	Contributed to user supplied prolog (in dvidict)

\special{!<PS code>}				% `literal macros' (use `j')

	Contributed to user supplied prolog (in dvidict)

Which method to use?  As with the plethora of schemes for figure inclusion
using \special, the user is here faced with an awkward choice. The following
suggestions may help:

If you are porting code designed for another driver you may be able to
just use what is there, or use that method with some minor modifications.

If you don't care about what coordinate system you operate in, then use
`ps::'.  This affords no protection and involves no overhead.  Use your
own gsave/grestore or save/restore, if appropriate.

If you want to be in the Standard PostScript coordinate system, then use
`ps:'.   This affords no protection and involves very little overhead.  
Use your own gsave/grestore or save/restore, if appropriate.

Note that use of `ps::' or `ps:' is only supported when the `j' command
line flag is used with DVIPSONE.
